/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package eventpb;

import "commonpb/commonpb.proto";
import "requestpb/requestpb.proto";
import "messagepb/messagepb.proto";
import "isspb/isspb.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/filecoin-project/mir/pkg/pb/eventpb";

// Event represents a state event to be injected into the state machine
message Event {
  // TODO, normalize naming, for instance Complete/Completed
  oneof type {
    Init                 init                    = 1;
    Tick                 tick                    = 2;
    WALAppend            wal_append              = 3;
    WALEntry             wal_entry               = 4;
    WALTruncate          wal_truncate            = 5;
    WALLoadAll           wal_load_all            = 6;
    NewRequests          new_requests            = 7;
    HashRequest          hash_request            = 8;
    HashResult           hash_result             = 9;
    SignRequest          sign_request            = 10;
    SignResult           sign_result             = 11;
    VerifyNodeSigs       verify_node_sigs        = 12;
    NodeSigsVerified     node_sigs_verified      = 13;
    RequestReady         request_ready           = 14;
    SendMessage          send_message            = 15;
    MessageReceived      message_received        = 16;
    Deliver              deliver                 = 17;
    isspb.ISSEvent       iss                     = 18;
    VerifyRequestSig     verify_request_sig      = 19;
    RequestSigVerified   request_sig_verified    = 20;
    StoreVerifiedRequest store_verified_request  = 21;
    AppSnapshotRequest   app_snapshot_request    = 22;
    AppSnapshot          app_snapshot            = 23;
    AppRestoreState      app_restore_state       = 24;
    TimerDelay           timer_delay             = 25;
    TimerRepeat          timer_repeat            = 26;
    TimerGarbageCollect  timer_garbage_collect   = 27;

    // for unit-tests
    google.protobuf.StringValue testingString = 301;
    google.protobuf.UInt64Value testingUint   = 302;

    // dispose_request can be used to inform a module that it is no longer needed. Unlike fork_request, dispose_request
    // is a normal event and is not treated any different from any other event type.
    DisposeRequest       dispose_request         = 401;
    // self_destruct event sent to the special system module id informs the core of the framework that the module that
    // sent this request should be removed.
    SelfDestruct         self_destruct           = 402;
    // fork_request event sent to a module informs the core that a new copy of that module should be created. It will
    // be eventually replied to with a fork_response event. This event is treated specially by the system and is not
    // delivered to the destination module. Instead, function `Fork(...)` is invoked on the destination module.
    ForkRequest          fork_request            = 403;
    // fork_response notifies the module of the outcome of previously issued fork_request.
    ForkResponse         fork_response           = 404;
  }

  // A list of follow-up events to process after this event has been processed.
  // This field is used if events need to be processed in a particular order.
  // For example, a message sending event must only be processed
  // after the corresponding entry has been persisted in the write-ahead log (WAL).
  // In this case, the WAL append event would be this event
  // and the next field would contain the message sending event.
  repeated Event next = 100;

  string dest_module = 200;
}

message DisposeRequest {
  // empty
}

message SelfDestruct {
  // empty
}

message ForkRequest {
  // new_module_id is the id of the new module that will be created after the fork.
  string new_module_id = 2;
  // origin can be used to recover the context of the request on response.
  ForkRequestOrigin origin = 4;
}

message ForkResponse {
  // new_module_id is the same as the one provided in ForkRequest. It is always present, even if the request has failed.
  string new_module_id = 1;
  // success indicates whether the new module was successfully created.
  bool success = 2;
  // error is present only if success is false. If present, describes what went wrong.
  string error = 3;
  // origin can be used to recover the context of the request on response.
  ForkRequestOrigin origin = 4;
}

message ForkRequestOrigin {
  oneof Type {
    google.protobuf.Empty empty         = 1;
    ContextStoreOrigin    context_store = 2;
  }
}

message Init {}

message Tick {}

message NewRequests {
  repeated requestpb.Request requests = 1;
}

message ContextStoreOrigin {
  uint64 itemID = 1;
}

message HashRequest {
  repeated commonpb.HashData data   = 1;
  HashOrigin                 origin = 2;
}

message HashResult {
  repeated bytes digests = 1;
  HashOrigin     origin  = 2;
}

message HashOrigin {
  string module = 1;
  oneof type {
    ContextStoreOrigin  context_store = 2;
    requestpb.Request   request       = 3;
    isspb.ISSHashOrigin iss           = 4;
  }
}

message SignRequest {
  repeated bytes data = 1;
  SignOrigin origin = 2;
}

message SignResult {
  bytes signature = 1;
  SignOrigin origin = 2;
}

message SignOrigin {
  string module = 1;
  oneof type {
    ContextStoreOrigin  context_store = 2;
    isspb.ISSSignOrigin iss           = 3;
  }
}

message SigVerData {
  repeated bytes data = 1;
}

message VerifyNodeSigs {
  repeated SigVerData data       = 1;
  repeated bytes      signatures = 2;
  SigVerOrigin        origin     = 3;
  repeated string     node_ids   = 4;
}

message NodeSigsVerified {
  SigVerOrigin    origin   = 1;
  repeated string node_ids = 2;
  repeated bool   valid    = 3;
  repeated string errors   = 4;
  bool            all_ok   = 5;
}

message SigVerOrigin {
  string module = 1;
  oneof type {
    ContextStoreOrigin    context_store = 2;
    isspb.ISSSigVerOrigin iss           = 3;
  }
}

message RequestReady {
  requestpb.Request request = 1;
}

message SendMessage {
  repeated string destinations = 1;
  messagepb.Message msg = 2;
}

message MessageReceived {
  string from = 1;
  messagepb.Message msg = 2;
}

message WALAppend {
  Event event = 1;
  uint64 retention_index = 2;
}

message WALEntry {
  Event event = 1;
}

message WALTruncate {
  uint64 retention_index = 1;
}

message WALLoadAll {
}

message Deliver {
  uint64 sn = 1;
  requestpb.Batch batch = 2;
}

message VerifyRequestSig {
  requestpb.Request request   = 1;
  bytes             signature = 2;
}

message RequestSigVerified {
  requestpb.Request request = 1;
  bool              valid   = 2;
  string            error   = 3;
}

message StoreVerifiedRequest {
  requestpb.Request request       = 1;
  bytes             data          = 2;
  bytes             authenticator = 3;
}

message AppSnapshotRequest {
  string module = 1;
  uint64 epoch  = 2;
}

message AppSnapshot {
  uint64 epoch = 1;
  bytes  data  = 2;
}

message AppRestoreState {
  bytes  data  = 1;
}

message TimerDelay {
  repeated Event  events = 1;
  uint64          delay  = 2;
}

message TimerRepeat {
  repeated Event  events          = 1;
  uint64          delay           = 2;
  uint64          retention_index = 3;
}

message TimerGarbageCollect {
  uint64 retention_index = 1;
}
