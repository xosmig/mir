// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: availabilitypb/availabilitypb.proto

package availabilitypb

import (
	mscpb "github.com/filecoin-project/mir/pkg/pb/availabilitypb/mscpb"
	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Event_RequestBatch
	//	*Event_NewBatch
	Type isEvent_Type `protobuf_oneof:"Type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetRequestBatch() *RequestBatch {
	if x, ok := x.GetType().(*Event_RequestBatch); ok {
		return x.RequestBatch
	}
	return nil
}

func (x *Event) GetNewBatch() *NewBatch {
	if x, ok := x.GetType().(*Event_NewBatch); ok {
		return x.NewBatch
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_RequestBatch struct {
	RequestBatch *RequestBatch `protobuf:"bytes,1,opt,name=request_batch,json=requestBatch,proto3,oneof"`
}

type Event_NewBatch struct {
	NewBatch *NewBatch `protobuf:"bytes,2,opt,name=new_batch,json=newBatch,proto3,oneof"`
}

func (*Event_RequestBatch) isEvent_Type() {}

func (*Event_NewBatch) isEvent_Type() {}

type RequestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *RequestBatchOrigin `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RequestBatch) Reset() {
	*x = RequestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatch) ProtoMessage() {}

func (x *RequestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatch.ProtoReflect.Descriptor instead.
func (*RequestBatch) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{1}
}

func (x *RequestBatch) GetOrigin() *RequestBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type NewBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId []byte              `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Cert    *Cert               `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin  *RequestBatchOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *NewBatch) Reset() {
	*x = NewBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBatch) ProtoMessage() {}

func (x *NewBatch) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBatch.ProtoReflect.Descriptor instead.
func (*NewBatch) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{2}
}

func (x *NewBatch) GetBatchId() []byte {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *NewBatch) GetCert() *Cert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *NewBatch) GetOrigin() *RequestBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type RequestBatchOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RequestBatchOrigin_ContextStore
	//	*RequestBatchOrigin_Dsl
	Type isRequestBatchOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RequestBatchOrigin) Reset() {
	*x = RequestBatchOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatchOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatchOrigin) ProtoMessage() {}

func (x *RequestBatchOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatchOrigin.ProtoReflect.Descriptor instead.
func (*RequestBatchOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{3}
}

func (x *RequestBatchOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RequestBatchOrigin) GetType() isRequestBatchOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RequestBatchOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RequestBatchOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RequestBatchOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RequestBatchOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRequestBatchOrigin_Type interface {
	isRequestBatchOrigin_Type()
}

type RequestBatchOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RequestBatchOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RequestBatchOrigin_ContextStore) isRequestBatchOrigin_Type() {}

func (*RequestBatchOrigin_Dsl) isRequestBatchOrigin_Type() {}

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Cert_Msc
	Type isCert_Type `protobuf_oneof:"Type"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_availabilitypb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_availabilitypb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_availabilitypb_proto_rawDescGZIP(), []int{4}
}

func (m *Cert) GetType() isCert_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Cert) GetMsc() *mscpb.Cert {
	if x, ok := x.GetType().(*Cert_Msc); ok {
		return x.Msc
	}
	return nil
}

type isCert_Type interface {
	isCert_Type()
}

type Cert_Msc struct {
	Msc *mscpb.Cert `protobuf:"bytes,1,opt,name=msc,proto3,oneof"`
}

func (*Cert_Msc) isCert_Type() {}

var File_availabilitypb_availabilitypb_proto protoreflect.FileDescriptor

var file_availabilitypb_availabilitypb_proto_rawDesc = []byte{
	0x0a, 0x23, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x70, 0x62, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73, 0x6c, 0x70,
	0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x6d, 0x73,
	0x63, 0x70, 0x62, 0x2f, 0x6d, 0x73, 0x63, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x22, 0x4a, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64,
	0x73, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x04, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2e, 0x6d, 0x73, 0x63, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x73, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_availabilitypb_availabilitypb_proto_rawDescOnce sync.Once
	file_availabilitypb_availabilitypb_proto_rawDescData = file_availabilitypb_availabilitypb_proto_rawDesc
)

func file_availabilitypb_availabilitypb_proto_rawDescGZIP() []byte {
	file_availabilitypb_availabilitypb_proto_rawDescOnce.Do(func() {
		file_availabilitypb_availabilitypb_proto_rawDescData = protoimpl.X.CompressGZIP(file_availabilitypb_availabilitypb_proto_rawDescData)
	})
	return file_availabilitypb_availabilitypb_proto_rawDescData
}

var file_availabilitypb_availabilitypb_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_availabilitypb_availabilitypb_proto_goTypes = []interface{}{
	(*Event)(nil),                 // 0: availabilitypb.Event
	(*RequestBatch)(nil),          // 1: availabilitypb.RequestBatch
	(*NewBatch)(nil),              // 2: availabilitypb.NewBatch
	(*RequestBatchOrigin)(nil),    // 3: availabilitypb.RequestBatchOrigin
	(*Cert)(nil),                  // 4: availabilitypb.Cert
	(*contextstorepb.Origin)(nil), // 5: contextstorepb.Origin
	(*dslpb.Origin)(nil),          // 6: dslpb.Origin
	(*mscpb.Cert)(nil),            // 7: availabilitypb.mscpb.Cert
}
var file_availabilitypb_availabilitypb_proto_depIdxs = []int32{
	1, // 0: availabilitypb.Event.request_batch:type_name -> availabilitypb.RequestBatch
	2, // 1: availabilitypb.Event.new_batch:type_name -> availabilitypb.NewBatch
	3, // 2: availabilitypb.RequestBatch.origin:type_name -> availabilitypb.RequestBatchOrigin
	4, // 3: availabilitypb.NewBatch.cert:type_name -> availabilitypb.Cert
	3, // 4: availabilitypb.NewBatch.origin:type_name -> availabilitypb.RequestBatchOrigin
	5, // 5: availabilitypb.RequestBatchOrigin.context_store:type_name -> contextstorepb.Origin
	6, // 6: availabilitypb.RequestBatchOrigin.dsl:type_name -> dslpb.Origin
	7, // 7: availabilitypb.Cert.msc:type_name -> availabilitypb.mscpb.Cert
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_availabilitypb_availabilitypb_proto_init() }
func file_availabilitypb_availabilitypb_proto_init() {
	if File_availabilitypb_availabilitypb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_availabilitypb_availabilitypb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatchOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_availabilitypb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_RequestBatch)(nil),
		(*Event_NewBatch)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RequestBatchOrigin_ContextStore)(nil),
		(*RequestBatchOrigin_Dsl)(nil),
	}
	file_availabilitypb_availabilitypb_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Cert_Msc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_availabilitypb_availabilitypb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_availabilitypb_availabilitypb_proto_goTypes,
		DependencyIndexes: file_availabilitypb_availabilitypb_proto_depIdxs,
		MessageInfos:      file_availabilitypb_availabilitypb_proto_msgTypes,
	}.Build()
	File_availabilitypb_availabilitypb_proto = out.File
	file_availabilitypb_availabilitypb_proto_rawDesc = nil
	file_availabilitypb_availabilitypb_proto_goTypes = nil
	file_availabilitypb_availabilitypb_proto_depIdxs = nil
}
