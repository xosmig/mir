// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: availabilitypb/quorumstoragepb/quorumstoragepb.proto

package quorumstoragepb

import (
	contextstorepb "github.com/filecoin-project/mir/pkg/pb/contextstorepb"
	dslpb "github.com/filecoin-project/mir/pkg/pb/dslpb"
	_ "github.com/filecoin-project/mir/pkg/pb/mir"
	requestpb "github.com/filecoin-project/mir/pkg/pb/requestpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Event_Store
	//	*Event_Stored
	//	*Event_VerifyBatch
	//	*Event_BatchVerified
	//	*Event_VerifyCert
	//	*Event_CertVerified
	//	*Event_RetrieveTransactions
	//	*Event_TransactionsRetrieved
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{0}
}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Event) GetStore() *StoreBatchOnQuorum {
	if x, ok := x.GetType().(*Event_Store); ok {
		return x.Store
	}
	return nil
}

func (x *Event) GetStored() *BatchStoredOnQuorum {
	if x, ok := x.GetType().(*Event_Stored); ok {
		return x.Stored
	}
	return nil
}

func (x *Event) GetVerifyBatch() *VerifyBatch {
	if x, ok := x.GetType().(*Event_VerifyBatch); ok {
		return x.VerifyBatch
	}
	return nil
}

func (x *Event) GetBatchVerified() *BatchVerified {
	if x, ok := x.GetType().(*Event_BatchVerified); ok {
		return x.BatchVerified
	}
	return nil
}

func (x *Event) GetVerifyCert() *VerifyCert {
	if x, ok := x.GetType().(*Event_VerifyCert); ok {
		return x.VerifyCert
	}
	return nil
}

func (x *Event) GetCertVerified() *CertVerified {
	if x, ok := x.GetType().(*Event_CertVerified); ok {
		return x.CertVerified
	}
	return nil
}

func (x *Event) GetRetrieveTransactions() *RetrieveTransactions {
	if x, ok := x.GetType().(*Event_RetrieveTransactions); ok {
		return x.RetrieveTransactions
	}
	return nil
}

func (x *Event) GetTransactionsRetrieved() *TransactionsRetrieved {
	if x, ok := x.GetType().(*Event_TransactionsRetrieved); ok {
		return x.TransactionsRetrieved
	}
	return nil
}

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Store struct {
	Store *StoreBatchOnQuorum `protobuf:"bytes,1,opt,name=store,proto3,oneof"`
}

type Event_Stored struct {
	Stored *BatchStoredOnQuorum `protobuf:"bytes,2,opt,name=stored,proto3,oneof"`
}

type Event_VerifyBatch struct {
	VerifyBatch *VerifyBatch `protobuf:"bytes,3,opt,name=verify_batch,json=verifyBatch,proto3,oneof"`
}

type Event_BatchVerified struct {
	BatchVerified *BatchVerified `protobuf:"bytes,4,opt,name=batch_verified,json=batchVerified,proto3,oneof"`
}

type Event_VerifyCert struct {
	VerifyCert *VerifyCert `protobuf:"bytes,5,opt,name=verify_cert,json=verifyCert,proto3,oneof"`
}

type Event_CertVerified struct {
	CertVerified *CertVerified `protobuf:"bytes,6,opt,name=cert_verified,json=certVerified,proto3,oneof"`
}

type Event_RetrieveTransactions struct {
	RetrieveTransactions *RetrieveTransactions `protobuf:"bytes,7,opt,name=retrieve_transactions,json=retrieveTransactions,proto3,oneof"`
}

type Event_TransactionsRetrieved struct {
	TransactionsRetrieved *TransactionsRetrieved `protobuf:"bytes,8,opt,name=transactions_retrieved,json=transactionsRetrieved,proto3,oneof"`
}

func (*Event_Store) isEvent_Type() {}

func (*Event_Stored) isEvent_Type() {}

func (*Event_VerifyBatch) isEvent_Type() {}

func (*Event_BatchVerified) isEvent_Type() {}

func (*Event_VerifyCert) isEvent_Type() {}

func (*Event_CertVerified) isEvent_Type() {}

func (*Event_RetrieveTransactions) isEvent_Type() {}

func (*Event_TransactionsRetrieved) isEvent_Type() {}

// StoreBatchOnQuorum can be used to create a batch and store in on a quorum of nodes wit the given metadata.
type StoreBatchOnQuorum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []byte                    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Origin   *StoreBatchOnQuorumOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *StoreBatchOnQuorum) Reset() {
	*x = StoreBatchOnQuorum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBatchOnQuorum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBatchOnQuorum) ProtoMessage() {}

func (x *StoreBatchOnQuorum) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBatchOnQuorum.ProtoReflect.Descriptor instead.
func (*StoreBatchOnQuorum) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{1}
}

func (x *StoreBatchOnQuorum) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StoreBatchOnQuorum) GetOrigin() *StoreBatchOnQuorumOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// BatchStoredOnQuorum is a response to a StoreBatchOnQuorum event.
type BatchStoredOnQuorum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *RetrieveCert             `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *StoreBatchOnQuorumOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *BatchStoredOnQuorum) Reset() {
	*x = BatchStoredOnQuorum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchStoredOnQuorum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStoredOnQuorum) ProtoMessage() {}

func (x *BatchStoredOnQuorum) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStoredOnQuorum.ProtoReflect.Descriptor instead.
func (*BatchStoredOnQuorum) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{2}
}

func (x *BatchStoredOnQuorum) GetCert() *RetrieveCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *BatchStoredOnQuorum) GetOrigin() *StoreBatchOnQuorumOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// VerifyBatch is used by the quorum storage to check the validity of the batch metadata.
type VerifyBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata []byte             `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Origin   *VerifyBatchOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyBatch) Reset() {
	*x = VerifyBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyBatch) ProtoMessage() {}

func (x *VerifyBatch) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyBatch.ProtoReflect.Descriptor instead.
func (*VerifyBatch) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{3}
}

func (x *VerifyBatch) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VerifyBatch) GetOrigin() *VerifyBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// BatchVerified is a response to a VerifyBatch event.
type BatchVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool               `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Err    string             `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Origin *VerifyBatchOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *BatchVerified) Reset() {
	*x = BatchVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchVerified) ProtoMessage() {}

func (x *BatchVerified) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchVerified.ProtoReflect.Descriptor instead.
func (*BatchVerified) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{4}
}

func (x *BatchVerified) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *BatchVerified) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *BatchVerified) GetOrigin() *VerifyBatchOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// VerifyCert can be used to verify the validity of the retrieval certifcate.
type VerifyCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *RetrieveCert     `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *VerifyCertOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *VerifyCert) Reset() {
	*x = VerifyCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCert) ProtoMessage() {}

func (x *VerifyCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCert.ProtoReflect.Descriptor instead.
func (*VerifyCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyCert) GetCert() *RetrieveCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *VerifyCert) GetOrigin() *VerifyCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// CertVerified is a response to a VerifyCert event.
type CertVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool              `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Err    string            `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Origin *VerifyCertOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *CertVerified) Reset() {
	*x = CertVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertVerified) ProtoMessage() {}

func (x *CertVerified) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertVerified.ProtoReflect.Descriptor instead.
func (*CertVerified) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{6}
}

func (x *CertVerified) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CertVerified) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *CertVerified) GetOrigin() *VerifyCertOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// RetrieveTransactions can be used to retrieve the transactions in a batch.
type RetrieveTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert   *RetrieveCert               `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	Origin *RetrieveTransactionsOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *RetrieveTransactions) Reset() {
	*x = RetrieveTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactions) ProtoMessage() {}

func (x *RetrieveTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactions.ProtoReflect.Descriptor instead.
func (*RetrieveTransactions) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveTransactions) GetCert() *RetrieveCert {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *RetrieveTransactions) GetOrigin() *RetrieveTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

// TransactionsRetrieved is a response to a RetrieveTransactions event.
type TransactionsRetrieved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxIds  [][]byte                    `protobuf:"bytes,1,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
	Txs    []*requestpb.Request        `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	Origin *RetrieveTransactionsOrigin `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *TransactionsRetrieved) Reset() {
	*x = TransactionsRetrieved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsRetrieved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsRetrieved) ProtoMessage() {}

func (x *TransactionsRetrieved) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsRetrieved.ProtoReflect.Descriptor instead.
func (*TransactionsRetrieved) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionsRetrieved) GetTxIds() [][]byte {
	if x != nil {
		return x.TxIds
	}
	return nil
}

func (x *TransactionsRetrieved) GetTxs() []*requestpb.Request {
	if x != nil {
		return x.Txs
	}
	return nil
}

func (x *TransactionsRetrieved) GetOrigin() *RetrieveTransactionsOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

type StoreBatchOnQuorumOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*StoreBatchOnQuorumOrigin_ContextStore
	//	*StoreBatchOnQuorumOrigin_Dsl
	Type isStoreBatchOnQuorumOrigin_Type `protobuf_oneof:"type"`
}

func (x *StoreBatchOnQuorumOrigin) Reset() {
	*x = StoreBatchOnQuorumOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBatchOnQuorumOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBatchOnQuorumOrigin) ProtoMessage() {}

func (x *StoreBatchOnQuorumOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBatchOnQuorumOrigin.ProtoReflect.Descriptor instead.
func (*StoreBatchOnQuorumOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{9}
}

func (x *StoreBatchOnQuorumOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *StoreBatchOnQuorumOrigin) GetType() isStoreBatchOnQuorumOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StoreBatchOnQuorumOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*StoreBatchOnQuorumOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *StoreBatchOnQuorumOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*StoreBatchOnQuorumOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isStoreBatchOnQuorumOrigin_Type interface {
	isStoreBatchOnQuorumOrigin_Type()
}

type StoreBatchOnQuorumOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type StoreBatchOnQuorumOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*StoreBatchOnQuorumOrigin_ContextStore) isStoreBatchOnQuorumOrigin_Type() {}

func (*StoreBatchOnQuorumOrigin_Dsl) isStoreBatchOnQuorumOrigin_Type() {}

type RetrieveTransactionsOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*RetrieveTransactionsOrigin_ContextStore
	//	*RetrieveTransactionsOrigin_Dsl
	Type isRetrieveTransactionsOrigin_Type `protobuf_oneof:"Type"`
}

func (x *RetrieveTransactionsOrigin) Reset() {
	*x = RetrieveTransactionsOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveTransactionsOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveTransactionsOrigin) ProtoMessage() {}

func (x *RetrieveTransactionsOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveTransactionsOrigin.ProtoReflect.Descriptor instead.
func (*RetrieveTransactionsOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{10}
}

func (x *RetrieveTransactionsOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *RetrieveTransactionsOrigin) GetType() isRetrieveTransactionsOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RetrieveTransactionsOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*RetrieveTransactionsOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *RetrieveTransactionsOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*RetrieveTransactionsOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isRetrieveTransactionsOrigin_Type interface {
	isRetrieveTransactionsOrigin_Type()
}

type RetrieveTransactionsOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type RetrieveTransactionsOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*RetrieveTransactionsOrigin_ContextStore) isRetrieveTransactionsOrigin_Type() {}

func (*RetrieveTransactionsOrigin_Dsl) isRetrieveTransactionsOrigin_Type() {}

type VerifyCertOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*VerifyCertOrigin_ContextStore
	//	*VerifyCertOrigin_Dsl
	Type isVerifyCertOrigin_Type `protobuf_oneof:"Type"`
}

func (x *VerifyCertOrigin) Reset() {
	*x = VerifyCertOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCertOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCertOrigin) ProtoMessage() {}

func (x *VerifyCertOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCertOrigin.ProtoReflect.Descriptor instead.
func (*VerifyCertOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyCertOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *VerifyCertOrigin) GetType() isVerifyCertOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VerifyCertOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*VerifyCertOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *VerifyCertOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*VerifyCertOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isVerifyCertOrigin_Type interface {
	isVerifyCertOrigin_Type()
}

type VerifyCertOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type VerifyCertOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*VerifyCertOrigin_ContextStore) isVerifyCertOrigin_Type() {}

func (*VerifyCertOrigin_Dsl) isVerifyCertOrigin_Type() {}

type VerifyBatchOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Type:
	//	*VerifyBatchOrigin_ContextStore
	//	*VerifyBatchOrigin_Dsl
	Type isVerifyBatchOrigin_Type `protobuf_oneof:"Type"`
}

func (x *VerifyBatchOrigin) Reset() {
	*x = VerifyBatchOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyBatchOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyBatchOrigin) ProtoMessage() {}

func (x *VerifyBatchOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyBatchOrigin.ProtoReflect.Descriptor instead.
func (*VerifyBatchOrigin) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{12}
}

func (x *VerifyBatchOrigin) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (m *VerifyBatchOrigin) GetType() isVerifyBatchOrigin_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *VerifyBatchOrigin) GetContextStore() *contextstorepb.Origin {
	if x, ok := x.GetType().(*VerifyBatchOrigin_ContextStore); ok {
		return x.ContextStore
	}
	return nil
}

func (x *VerifyBatchOrigin) GetDsl() *dslpb.Origin {
	if x, ok := x.GetType().(*VerifyBatchOrigin_Dsl); ok {
		return x.Dsl
	}
	return nil
}

type isVerifyBatchOrigin_Type interface {
	isVerifyBatchOrigin_Type()
}

type VerifyBatchOrigin_ContextStore struct {
	ContextStore *contextstorepb.Origin `protobuf:"bytes,2,opt,name=context_store,json=contextStore,proto3,oneof"`
}

type VerifyBatchOrigin_Dsl struct {
	Dsl *dslpb.Origin `protobuf:"bytes,3,opt,name=dsl,proto3,oneof"`
}

func (*VerifyBatchOrigin_ContextStore) isVerifyBatchOrigin_Type() {}

func (*VerifyBatchOrigin_Dsl) isVerifyBatchOrigin_Type() {}

type RetrieveCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetrieveCert) Reset() {
	*x = RetrieveCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveCert) ProtoMessage() {}

func (x *RetrieveCert) ProtoReflect() protoreflect.Message {
	mi := &file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveCert.ProtoReflect.Descriptor instead.
func (*RetrieveCert) Descriptor() ([]byte, []int) {
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP(), []int{13}
}

var File_availabilitypb_quorumstoragepb_quorumstoragepb_proto protoreflect.FileDescriptor

var file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDesc = []byte{
	0x0a, 0x34, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x70, 0x62,
	0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62,
	0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x1a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x73,
	0x6c, 0x70, 0x62, 0x2f, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x6d, 0x69, 0x72, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x04, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x44, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x14, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x22, 0x73, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x65, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x73, 0x0a, 0x0d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x7a, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x71, 0x0a,
	0x0c, 0x43, 0x65, 0x72, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x22, 0x8e, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x9c, 0x01,
	0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x73, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x64, 0x73, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x03, 0x64, 0x73, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x73, 0x6c, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x73, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x0e, 0x0a, 0x0c,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x42, 0x47, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6d, 0x69, 0x72, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x70, 0x62, 0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescOnce sync.Once
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescData = file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDesc
)

func file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescGZIP() []byte {
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescOnce.Do(func() {
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescData = protoimpl.X.CompressGZIP(file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescData)
	})
	return file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDescData
}

var file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_goTypes = []interface{}{
	(*Event)(nil),                      // 0: quorumstoragepb.Event
	(*StoreBatchOnQuorum)(nil),         // 1: quorumstoragepb.StoreBatchOnQuorum
	(*BatchStoredOnQuorum)(nil),        // 2: quorumstoragepb.BatchStoredOnQuorum
	(*VerifyBatch)(nil),                // 3: quorumstoragepb.VerifyBatch
	(*BatchVerified)(nil),              // 4: quorumstoragepb.BatchVerified
	(*VerifyCert)(nil),                 // 5: quorumstoragepb.VerifyCert
	(*CertVerified)(nil),               // 6: quorumstoragepb.CertVerified
	(*RetrieveTransactions)(nil),       // 7: quorumstoragepb.RetrieveTransactions
	(*TransactionsRetrieved)(nil),      // 8: quorumstoragepb.TransactionsRetrieved
	(*StoreBatchOnQuorumOrigin)(nil),   // 9: quorumstoragepb.StoreBatchOnQuorumOrigin
	(*RetrieveTransactionsOrigin)(nil), // 10: quorumstoragepb.RetrieveTransactionsOrigin
	(*VerifyCertOrigin)(nil),           // 11: quorumstoragepb.VerifyCertOrigin
	(*VerifyBatchOrigin)(nil),          // 12: quorumstoragepb.VerifyBatchOrigin
	(*RetrieveCert)(nil),               // 13: quorumstoragepb.RetrieveCert
	(*requestpb.Request)(nil),          // 14: requestpb.Request
	(*contextstorepb.Origin)(nil),      // 15: contextstorepb.Origin
	(*dslpb.Origin)(nil),               // 16: dslpb.Origin
}
var file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_depIdxs = []int32{
	1,  // 0: quorumstoragepb.Event.store:type_name -> quorumstoragepb.StoreBatchOnQuorum
	2,  // 1: quorumstoragepb.Event.stored:type_name -> quorumstoragepb.BatchStoredOnQuorum
	3,  // 2: quorumstoragepb.Event.verify_batch:type_name -> quorumstoragepb.VerifyBatch
	4,  // 3: quorumstoragepb.Event.batch_verified:type_name -> quorumstoragepb.BatchVerified
	5,  // 4: quorumstoragepb.Event.verify_cert:type_name -> quorumstoragepb.VerifyCert
	6,  // 5: quorumstoragepb.Event.cert_verified:type_name -> quorumstoragepb.CertVerified
	7,  // 6: quorumstoragepb.Event.retrieve_transactions:type_name -> quorumstoragepb.RetrieveTransactions
	8,  // 7: quorumstoragepb.Event.transactions_retrieved:type_name -> quorumstoragepb.TransactionsRetrieved
	9,  // 8: quorumstoragepb.StoreBatchOnQuorum.origin:type_name -> quorumstoragepb.StoreBatchOnQuorumOrigin
	13, // 9: quorumstoragepb.BatchStoredOnQuorum.cert:type_name -> quorumstoragepb.RetrieveCert
	9,  // 10: quorumstoragepb.BatchStoredOnQuorum.origin:type_name -> quorumstoragepb.StoreBatchOnQuorumOrigin
	12, // 11: quorumstoragepb.VerifyBatch.origin:type_name -> quorumstoragepb.VerifyBatchOrigin
	12, // 12: quorumstoragepb.BatchVerified.origin:type_name -> quorumstoragepb.VerifyBatchOrigin
	13, // 13: quorumstoragepb.VerifyCert.cert:type_name -> quorumstoragepb.RetrieveCert
	11, // 14: quorumstoragepb.VerifyCert.origin:type_name -> quorumstoragepb.VerifyCertOrigin
	11, // 15: quorumstoragepb.CertVerified.origin:type_name -> quorumstoragepb.VerifyCertOrigin
	13, // 16: quorumstoragepb.RetrieveTransactions.cert:type_name -> quorumstoragepb.RetrieveCert
	10, // 17: quorumstoragepb.RetrieveTransactions.origin:type_name -> quorumstoragepb.RetrieveTransactionsOrigin
	14, // 18: quorumstoragepb.TransactionsRetrieved.txs:type_name -> requestpb.Request
	10, // 19: quorumstoragepb.TransactionsRetrieved.origin:type_name -> quorumstoragepb.RetrieveTransactionsOrigin
	15, // 20: quorumstoragepb.StoreBatchOnQuorumOrigin.context_store:type_name -> contextstorepb.Origin
	16, // 21: quorumstoragepb.StoreBatchOnQuorumOrigin.dsl:type_name -> dslpb.Origin
	15, // 22: quorumstoragepb.RetrieveTransactionsOrigin.context_store:type_name -> contextstorepb.Origin
	16, // 23: quorumstoragepb.RetrieveTransactionsOrigin.dsl:type_name -> dslpb.Origin
	15, // 24: quorumstoragepb.VerifyCertOrigin.context_store:type_name -> contextstorepb.Origin
	16, // 25: quorumstoragepb.VerifyCertOrigin.dsl:type_name -> dslpb.Origin
	15, // 26: quorumstoragepb.VerifyBatchOrigin.context_store:type_name -> contextstorepb.Origin
	16, // 27: quorumstoragepb.VerifyBatchOrigin.dsl:type_name -> dslpb.Origin
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_init() }
func file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_init() {
	if File_availabilitypb_quorumstoragepb_quorumstoragepb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBatchOnQuorum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchStoredOnQuorum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsRetrieved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBatchOnQuorumOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveTransactionsOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyCertOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyBatchOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Event_Store)(nil),
		(*Event_Stored)(nil),
		(*Event_VerifyBatch)(nil),
		(*Event_BatchVerified)(nil),
		(*Event_VerifyCert)(nil),
		(*Event_CertVerified)(nil),
		(*Event_RetrieveTransactions)(nil),
		(*Event_TransactionsRetrieved)(nil),
	}
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StoreBatchOnQuorumOrigin_ContextStore)(nil),
		(*StoreBatchOnQuorumOrigin_Dsl)(nil),
	}
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*RetrieveTransactionsOrigin_ContextStore)(nil),
		(*RetrieveTransactionsOrigin_Dsl)(nil),
	}
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*VerifyCertOrigin_ContextStore)(nil),
		(*VerifyCertOrigin_Dsl)(nil),
	}
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*VerifyBatchOrigin_ContextStore)(nil),
		(*VerifyBatchOrigin_Dsl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_goTypes,
		DependencyIndexes: file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_depIdxs,
		MessageInfos:      file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_msgTypes,
	}.Build()
	File_availabilitypb_quorumstoragepb_quorumstoragepb_proto = out.File
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_rawDesc = nil
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_goTypes = nil
	file_availabilitypb_quorumstoragepb_quorumstoragepb_proto_depIdxs = nil
}
