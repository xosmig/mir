package codegen

import (
	"fmt"
	"go/ast"
	"reflect"

	"github.com/dave/jennifer/jen"
	"google.golang.org/protobuf/reflect/protoreflect"

	"github.com/filecoin-project/mir/codegen/proto-converter/util/astutil"
	"github.com/filecoin-project/mir/codegen/proto-converter/util/jenutil"
	"github.com/filecoin-project/mir/codegen/proto-converter/util/protoreflectutil"
)

// Message contains the information needed to generate code for a protobuf message.
type Message struct {
	fields               Fields
	mirPkgPath           string
	pbType               jen.Code
	mirType              jen.Code
	protoDesc            protoreflect.MessageDescriptor
	reflectPbGoStructPtr reflect.Type
}

func (m *Message) Name() string {
	return m.reflectPbGoStructPtr.Name()
}

func (m *Message) PbType() jen.Code {
	return m.pbType
}

func (m *Message) MirType() jen.Code {
	return m.mirType
}

// PbTypePtr returns the code corresponding to the type of the pointer to the protoc-generated struct.
func (m *Message) PbTypePtr() jen.Code {
	return jen.Op("*").Add(m.pbType)
}

// MirTypePtr returns the code corresponding to the type of the pointer to the Mir-generated struct.
func (m *Message) MirTypePtr() jen.Code {
	return jen.Op("*").Add(m.mirType)
}

func (m *Message) FromPbType(code jen.Code) jen.Code {
	return jen.Qual(m.mirPkgPath, m.Name()+"FromPb").Params(code)
}

// ToPbFunc returns the name of the function that converts a Mir-generated struct to a protobuf-generated struct.
func (m *Message) ToPbFunc(code jen.Code) jen.Code {
	return jen.Qual(m.mirPkgPath, m.Name()+"ToPb").Params(code)
}

// LowercaseName returns the name of the message in lowercase.
func (m *Message) LowercaseName() string {
	return astutil.ToUnexported(m.Name())
}

func (m *Message) FuncParamPbType() jen.Code {
	return jen.Id(m.LowercaseName()).Add(m.PbTypePtr())
}

func (m *Message) FuncParamMirType() jen.Code {
	return jen.Id(m.LowercaseName()).Add(m.mirType)
}

func (m *Message) StructParamPbType() jen.Code {
	return jen.Id(m.Name()).Add(m.pbType)
}

func (m *Message) StructParamMirType() jen.Code {
	return jen.Id(m.Name()).Add(m.mirType)
}

// MessageFromPbGoType returns the message corresponding to the given protobuf-generated struct type.
func MessageFromPbGoType(pbGoStructPtr reflect.Type) (*Message, error) {
	protoDesc, ok := protoreflectutil.DescriptorForType(pbGoStructPtr)
	if !ok {
		return nil, fmt.Errorf("%T is not a protobuf message", pbGoStructPtr)
	}

	pbType := jenutil.QualFromType(pbGoStructPtr.Elem())

	shouldGenerateMirStruct := IsMirEvent(protoDesc) || IsMirMessage(protoDesc) || IsMirStruct(protoDesc)

	var pkgPath string
	var mirType jen.Code
	if shouldGenerateMirStruct {
		// The type of the struct that will be generated.
		pkgPath = StructsPackagePath(pbGoStructPtr.Elem().PkgPath())
		mirType = jen.Qual(pkgPath, pbGoStructPtr.Elem().Name())
	} else {
		// The original type generated by protoc.
		pkgPath = pbGoStructPtr.Elem().PkgPath()
		mirType = pbType
	}

	return &Message{
		mirPkgPath:           pkgPath,
		name:                 pbGoStructPtr.Elem().Name(),
		pbType:               pbType,
		mirType:              mirType,
		protoDesc:            protoDesc,
		reflectPbGoStructPtr: pbGoStructPtr,
	}, nil
}

func (m *Message) Fields() (Fields, error) {
	// Return the cached value if present.
	if m.fields != nil {
		return m.fields, nil
	}

	for i := 0; i < m.reflectPbGoStructPtr.Elem().NumField(); i++ {
		// Get go representation of the field.
		goField := m.reflectPbGoStructPtr.Elem().Field(i)
		if !ast.IsExported(goField.Name) {
			// Skip unexported fields.
			continue
		}

		if oneofTag, ok := goField.Tag.Lookup("protobuf_oneof"); ok {
			_ = oneofTag
			// TODO: oneofs are skipped for now.
			continue
		}

		// Get protobuf representation of the field.
		protoName, err := getProtoNameOfField(goField)
		if err != nil {
			return nil, err
		}
		protoField := m.protoDesc.Fields().ByName(protoreflect.Name(protoName))

		// Create the Field struct.
		field, err := GetField(goField, protoField)
		if err != nil {
			return nil, err
		}

		m.fields = append(m.fields, field)
	}

	return m.fields, nil
}

func (m *Message) IsMirEvent() bool {
	return IsMirEvent(m.protoDesc)
}

func (m *Message) IsMirMessage() bool {
	return IsMirMessage(m.protoDesc)
}

func (m *Message) IsMirStruct() bool {
	return IsMirStruct(m.protoDesc)
}

// ShouldGenerateMirType returns true if Mir should generate a struct for the message type.
func (m *Message) ShouldGenerateMirType() bool {
	return ShouldGenerateMirType(m.protoDesc)
}
