package codegen

import (
	"fmt"
	"reflect"

	"github.com/filecoin-project/mir/codegen/proto-converter/codegen/model"
	"github.com/filecoin-project/mir/codegen/proto-converter/util/importerutil"
)

//func generateToMirMethod(g *jen.File, msg *Message) error {
//	if !msg.ShouldGenerateMirType() {
//		// Ignore non-annotated messages.
//		return nil
//	}
//
//	fields, err := msg.Fields()
//	if err != nil {
//		return err
//	}
//
//	g.Func().Params(jen.Id("pb").Add(msg.PbType())).Id("ToMir").Params().Add(msg.MirType()).Block(
//		jen.Return().Add(msg.NewMirType()).ValuesFunc(func(group *jen.Group) {
//			for _, field := range fields {
//				group.Id(field.Name).Op(":").Add(field.Type.ToMir(jen.Id("pb").Dot(field.Name)))
//			}
//		}),
//	)
//
//	return nil
//}

//func GenerateToMirMethods(inputDir string, inputPackagePath string, msgs []*Message) error {
//	// Generate the code.
//	g := jen.NewFilePath(inputPackagePath)
//	for _, msg := range msgs {
//		err := generateToMirMethod(g, msg)
//		if err != nil {
//			return err
//		}
//	}
//
//	// Open the output file.
//	outputFile := path.Join(inputDir, "to_mir.mir.go")
//	f, err := os.Create(outputFile)
//	if err != nil {
//		return fmt.Errorf("error creating output file: %w", err)
//	}
//
//	defer func() {
//		_ = f.Close()
//		// Remove the output file in case of a failure to avoid causing compilation errors.
//		if err != nil {
//			_ = os.Remove(outputFile)
//		}
//	}()
//
//	// Render the file.
//	return g.Render(f)
//}

// GenerateAll is used by the generator program (which, in turn, is generated by proto-converter).
func GenerateAll(pbGoStructPtrTypes []reflect.Type) error {
	if len(pbGoStructPtrTypes) == 0 {
		// Nothing to do.
		return nil
	}

	// Determine the input package.
	inputPackagePath := pbGoStructPtrTypes[0].Elem().PkgPath()

	// Get the directory with input sources.
	inputDir, err := importerutil.GetSourceDirForPackage(inputPackagePath)
	if err != nil {
		return err
	}

	// Check that all structs are in the same package.
	for _, ptrType := range pbGoStructPtrTypes {
		if ptrType.Elem().PkgPath() != inputPackagePath {
			return fmt.Errorf("passed structs are in different packages: %v and %v",
				inputPackagePath, ptrType.Elem().PkgPath())
		}
	}

	msgs, oneofOptions, err := model.ParseGoTypes(pbGoStructPtrTypes)
	if err != nil {
		return err
	}

	err = GenerateOneofInterfaces(inputDir, inputPackagePath, msgs, oneofOptions)
	if err != nil {
		return err
	}

	err = GenerateMirTypes(inputDir, inputPackagePath, msgs, oneofOptions)
	if err != nil {
		return err
	}

	return nil
}
