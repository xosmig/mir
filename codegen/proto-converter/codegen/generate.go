package codegen

import (
	"fmt"
	"reflect"

	"github.com/filecoin-project/mir/codegen/proto-converter/codegen/model"
	"github.com/filecoin-project/mir/codegen/proto-converter/util/importerutil"
	"github.com/filecoin-project/mir/pkg/util/sliceutil"
)

// GenerateAll is used by the generator program (which, in turn, is generated by proto-converter).
func GenerateAll(pbGoStructPtrTypes []reflect.Type) error {
	if len(pbGoStructPtrTypes) == 0 {
		// Nothing to do.
		return nil
	}

	// Determine the input package.
	inputPackagePath := pbGoStructPtrTypes[0].Elem().PkgPath()

	// Get the directory with input sources.
	inputDir, err := importerutil.GetSourceDirForPackage(inputPackagePath)
	if err != nil {
		return err
	}

	// Check that all structs are in the same package.
	for _, ptrType := range pbGoStructPtrTypes {
		if ptrType.Elem().PkgPath() != inputPackagePath {
			return fmt.Errorf("passed structs are in different packages: %v and %v",
				inputPackagePath, ptrType.Elem().PkgPath())
		}
	}

	parser := model.NewParser()
	msgs, err := parser.ParseMessages(pbGoStructPtrTypes)
	if err != nil {
		return err
	}

	err = GenerateMirTypes(inputDir, inputPackagePath, msgs, parser)
	if err != nil {
		return err
	}

	// Look for the root of the event hierarchy.
	eventRootMessages := sliceutil.Filter(msgs, func(_ int, msg *model.Message) bool { return msg.IsEventRoot() })
	if len(eventRootMessages) > 1 {
		return fmt.Errorf("found multiple messages marked as event roots: %v",
			sliceutil.Transform(eventRootMessages, func(_ int, msg *model.Message) string { return msg.Name() }))
	}

	// If this package contains the root of the event hierarchy, generate constructors for all events.
	if len(eventRootMessages) == 1 {
		eventRoot, err := parser.ParseEventHierarchy(eventRootMessages[0])
		if err != nil {
			return err
		}

		err := GenerateEventConstructors(eventRoot)
		if err != nil {
			return err
		}
	}

	return nil
}
